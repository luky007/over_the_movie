{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Note</p> <p>This project is part of a dummy simulation.</p>"},{"location":"#what-it-does","title":"What it does:","text":"<ul> <li> <p>Clean the three input CSV file given by the client.</p> </li> <li> <p>Import these inside a mySQL database.</p> </li> </ul>"},{"location":"#complete-list-of-things-that-it-does-to-the-csv","title":"Complete list of things that it does to the CSV:","text":""},{"location":"#moviescsv","title":"movies.csv","text":"<ul> <li>Check if there are exactly 3 columns</li> <li>Check if movie id is unique and a int</li> <li>Check if movie has a number indicating the year of release</li> <li>Check if year of release is lower than 2024</li> <li>Check if year of release is higher than 1888</li> <li>Check if there at least one genre</li> <li>Check if there repeated genre in the same movie</li> <li>Check if the title exist</li> <li>Check if the original title exist</li> <li>Check if the title and the original title are the same</li> <li>Check if some movies share the same title and year of release</li> <li>Check if movie exist based on title and year of release</li> <li>Fix some known typo in the genre</li> <li>Try to fix the title by removing the last comma</li> <li>Remove 'a.k.a.' from the original title</li> <li>Remove second 'a.k.a.' from movie id: 2952</li> </ul>"},{"location":"#es-input-moviescsv","title":"Es. input movies.csv","text":"MovieID Title Genres 1 Toy Story (1995) Animation|Children's|Comedy 2 Jumanji (1995) Adventure|Children's|Fantasy 3 Grumpier Old Men (1995) Comedy|Romance 30 Shanghai Triad (Yao a yao yao dao waipo qiao) (1995) Drama"},{"location":"#ratingscsv","title":"ratings.csv","text":"<ul> <li>Check if there are exactly 4 columns</li> <li>Check if the movie id is unique and a int</li> <li>Check if the user id is unique and a int</li> <li>Check if the gender is either \"M\" or \"F\"</li> <li>Check if the user age is a int and within a plausible range</li> <li>Check if the postal code (CAP) exists in Italy and is a int</li> <li>Fix typo in the job name, \"Data scientis\" -&gt; \"Data scientist\"</li> </ul>"},{"location":"#es-input-ratingscsv","title":"Es. input ratings.csv","text":"UserID MovieID Rating Timestamp 1 1193 5 978300760 1 661 3 978302109 1 914 3 978301968 2 1210 4 978298151"},{"location":"#userscsv","title":"users.csv","text":"<ul> <li>Check if there are exactly 4 columns</li> <li>Check if the movie id is unique and a int</li> <li>Check if the user id is unique and a int</li> <li>Check if the rating is a int within 1 and 5</li> <li>Check if timestamp is a number</li> </ul>"},{"location":"#es-input-userscsv","title":"Es. input users.csv","text":"UserID Gender Age CAP Word 3 M 24 36100 Autista 4 M 37 85024 Data Engineer 5 M 15 01010 Studente"},{"location":"#who-worked-at-this","title":"Who worked at this:","text":""},{"location":"ER_diagram/","title":"ER diagram","text":"<pre><code>%%{\n  init: {\n    'theme': 'dark'\n  }\n}%%\nerDiagram\n  movies {\n    int movie_id PK\n    varchar movie_title\n    varchar movie_original_title\n    int year_release\n  }\n  genres {\n    int genre_id PK\n    varchar genre\n  }\n  movies_genres_link {\n    int movie_id FK\n    int genre_id FK\n  }\n  users {\n    int user_id PK\n    varchar gender\n    int age\n    int cap\n    int job_id FK\n  }\n  jobs {\n    int job_id PK\n    varchar job_type\n  }\n  ratings {\n    int user_id PK, FK\n    int movie_id PK, FK\n    int rating\n    bigint timestamp_unix\n  }\n  movies ||--|{ movies_genres_link : has\n  genres ||--|{ movies_genres_link : has\n  users ||--o{ ratings : \"can leave\"\n  movies ||--o{ ratings : \"can have\"\n  users ||--|| jobs : \"works as a\"\n</code></pre>"},{"location":"Use_case_diagram/","title":"Use case diagram","text":""},{"location":"docstrings/","title":"Docstrings","text":"<p>Script for importing the csv files given by \"Over the movie\" into a mySQL server.</p> <p></p>"},{"location":"docstrings/#src.python.process_movie_csv.main","title":"<code>main()</code>","text":"<p>The main function.</p> Source code in <code>src/python/process_movie_csv.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"The main function.\"\"\"\n    coloredlogs.install()  # pyright: ignore[reportUnknownMemberType]\n    path_current_folder = Path(__file__).resolve().parent\n    logger = logging.getLogger(Path(__file__).stem)\n    logger.setLevel(logging.INFO)\n\n    list_movies = read_csv_movie(\n        path_current_folder.parent / \"csv\" / \"input\" / \"movies.csv\"\n    )\n    list_users = read_csv_users(\n        path_current_folder.parent / \"csv\" / \"input\" / \"users.csv\",\n        path_current_folder.parent / \"csv\" / \"input\" / \"comuni.json\",\n    )\n    list_ratings = read_csv_ratings(\n        path_current_folder.parent / \"csv\" / \"input\" / \"ratings.csv\",\n    )\n    connection: PooledMySQLConnection | MySQLConnectionAbstract = myc.connect(\n        host=\"localhost\", user=\"root\", password=\"root\", database=\"over_the_movie_dev\"\n    )\n    drop_all_tables(connection=connection)\n    execute_sql_file(\n        connection=connection,\n        path_sql=Path(path_current_folder.parent / \"sql\" / \"create_tables\").with_suffix(\n            \".sql\"\n        ),\n    )\n    load_db(\n        connection=connection,\n        list_movies=list_movies,\n        list_users=list_users,\n        list_ratings=list_ratings,\n    )\n</code></pre>"},{"location":"docstrings/#csv","title":"CSV","text":"<p>Utils definitions for reading and writing csv files.</p> <p></p>"},{"location":"docstrings/#src.python.csv_utils.fix_genres","title":"<code>fix_genres(list_genres_current_row, raw_line, counter_line)</code>","text":"<p>Fix the errors in the genres.</p> <p>Parameters:</p> Name Type Description Default <code>list_genres_current_row</code> <code>list[str]</code> <p>a list containing the genres</p> required <code>raw_line</code> <code>list[str]</code> <p>the raw input line to process</p> required <code>counter_line</code> <code>int</code> <p>the line number of the input. Used for logging only</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: the fixed list containing the genres</p> Source code in <code>src/python/csv_utils.py</code> <pre><code>def fix_genres(\n    list_genres_current_row: list[str], raw_line: str, counter_line: int\n) -&gt; list[str]:\n    \"\"\"Fix the errors in the genres.\n\n    Args:\n        list_genres_current_row (list[str]): a list containing the genres\n        raw_line (list[str]): the raw input line to process\n        counter_line (int): the line number of the input. Used for logging only\n\n    Returns:\n        list[str]: the fixed list containing the genres\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    for genres in list_genres_current_row.copy():\n        if genres == \"Dramatic\":\n            list_genres_current_row.remove(\"Dramatic\")\n            list_genres_current_row.append(\"Drama\")\n            logger.info(\n                \"CHANGED: %s Changed genre from Dramatic to Drama. Line %s\",\n                raw_line,\n                counter_line,\n            )\n        if genres == \"Dramma\":\n            list_genres_current_row.remove(\"Dramma\")\n            list_genres_current_row.append(\"Drama\")\n            logger.info(\n                \"CHANGED: %s Changed genre from Dramma to Drama. Line %s\",\n                raw_line,\n                counter_line,\n            )\n        if genres == \"Comedy--Horror\":\n            list_genres_current_row.remove(\"Comedy--Horror\")\n            list_genres_current_row.append(\"Horror\")\n            list_genres_current_row.append(\"Comedy\")\n            logger.info(\n                \"CHANGED: %s Changed genre from Comedy--Horror to Comedy and Horror. Line %s\",\n                raw_line,\n                counter_line,\n            )\n    return list_genres_current_row\n</code></pre>"},{"location":"docstrings/#src.python.csv_utils.read_csv_movie","title":"<code>read_csv_movie(path_csv)</code>","text":"<p>Read the Movie csv given by \"Over the movie\". Skip the line if errors.</p> <p>Parameters:</p> Name Type Description Default <code>path_csv</code> <code>Path</code> <p>the path of the .csv to read.</p> required <p>Returns:</p> Type Description <code>list[Movie]</code> <p>list[Movie]: a list an Movie object.</p> Source code in <code>src/python/csv_utils.py</code> <pre><code>def read_csv_movie(path_csv: Path) -&gt; list[Movie]:  # noqa: PLR0915\n    \"\"\"Read the Movie csv given by \"Over the movie\". Skip the line if errors.\n\n    Args:\n        path_csv (Path): the path of the .csv to read.\n\n    Returns:\n        list[Movie]: a list an Movie object.\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    (\n        max_column_allowed,\n        max_elem_btw_bracket,\n        min_year_release,\n        max_year_release,\n    ) = 3, 2, 1888, 2024\n    with open(path_csv, encoding=\"UTF-8\") as file:\n        list_movieid: set[int] = set()\n        dict_name_movie_year: dict[str, int] = {}\n        list_movies: list[Movie] = []\n\n        csv_reader = csv.DictReader(file, delimiter=\",\")\n        for i, row in enumerate(csv_reader, start=1):\n            orig_movie_name = None\n            if len(row) &gt; max_column_allowed:\n                sys.exit(\"Expected only 3 columns\")\n            movie_id_raw, title_raw, genres_raw = (\n                row[\"MovieID\"],\n                row[\"Title\"],\n                row[\"Genres\"],\n            )\n\n            try:\n                movie_id = int(movie_id_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The movie id need to be an int. Now is %s Line %s\",\n                    movie_id_raw,\n                    i,\n                )\n                continue\n\n            if movie_id in list_movieid:\n                sys.exit(f\"The movie_id is not unique. Line {i}\")\n            list_movieid.add(movie_id)\n\n            title_regx = re.findall(r\"^(.*?)\\(\", title_raw)\n            if not title_regx:\n                logger.warning(\"SKIPPED: %s Year movie not found. Line %s\", row, i)\n                continue\n            title = str(title_regx[0].strip())\n\n            matches_betw_bracket = re.findall(r\"\\((.*?)\\)\", title_raw)\n            if len(matches_betw_bracket) == 1:\n                year_movie = matches_betw_bracket[0]\n            elif len(matches_betw_bracket) == max_elem_btw_bracket:\n                orig_movie_name, year_movie = matches_betw_bracket\n            else:\n                logger.warning(\n                    \"SKIPPED: %s has too many element between bracket. Line %s\",\n                    title_raw,\n                    i,\n                )\n                continue\n            list_genres_current_row = genres_raw.split(\"|\")\n\n            try:\n                year_movie = int(year_movie)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: Year need to be an int. Now is %s Line %s\", year_movie, i\n                )\n                continue\n            if year_movie &lt; min_year_release:\n                logger.warning(\n                    \"SKIPPED: Year must be higher than %s. Now is: %s Line %s\",\n                    min_year_release,\n                    year_movie,\n                    i,\n                )\n                continue\n            if year_movie &gt; max_year_release:\n                logger.warning(\n                    \"SKIPPED: Year must be lower than %s. Now is: %s Line %s\",\n                    max_year_release,\n                    year_movie,\n                    i,\n                )\n                continue\n\n            if len(list_genres_current_row) == 0:\n                logger.warning(\n                    \"SKIPPED: %s The genres cannot be empty. Line %s\", row, i\n                )\n                continue\n            if len(list_genres_current_row) != len(set(list_genres_current_row)):\n                logger.warning(\n                    \"SKIPPED: %s The genres cannot be repeated. Line %s\", row, i\n                )\n                continue\n\n            if len(title) == 0:\n                logger.warning(\"SKIPPED: %s The title cannot be empty. Line %s\", row, i)\n                continue\n            if orig_movie_name is not None and len(orig_movie_name) == 0:\n                logger.warning(\n                    \"SKIPPED: %s The original title cannot be empty. Line %s\", row, i\n                )\n                continue\n            if orig_movie_name is not None and title.strip() == orig_movie_name.strip():\n                logger.warning(\n                    \"SKIPPED: %s The original title and title are equal. Line %s\",\n                    row,\n                    i,\n                )\n                continue\n            if orig_movie_name is not None and orig_movie_name.find(\"a.k.a. \") != -1:\n                if orig_movie_name == \"a.k.a. Sydney, a.k.a. Hard Eight\":\n                    orig_movie_name = \"Sydney\"\n                    logger.info(\n                        \"CHANGED: %s Remove double aka, now is %s Line %s\",\n                        row,\n                        orig_movie_name,\n                        i,\n                    )\n                else:\n                    orig_movie_name = str(orig_movie_name.split(\"a.k.a. \")[1])\n                    logger.info(\n                        \"CHANGED: %s Remove single aka, now is %s. Line %s\",\n                        row,\n                        orig_movie_name,\n                        i,\n                    )\n            if (\n                title in dict_name_movie_year\n                and dict_name_movie_year.get(str(year_movie)) == year_movie\n            ):\n                logger.warning(\n                    \"SKIPPED: %s Film equal in name and year. Line %s\", row, i\n                )\n                continue\n            dict_name_movie_year[str(title)] = year_movie\n\n            title = str(re.sub(r\",\\s[A-Z]\\w*$\", \"\", title))\n            orig_movie_name = str(re.sub(r\",\\s[A-Z]\\w*$\", \"\", str(orig_movie_name)))\n\n            list_genres_current_row = fix_genres(\n                list_genres_current_row, counter_line=i, raw_line=str(row)\n            )\n\n            list_movies.append(\n                Movie(\n                    movie_id=movie_id,\n                    title=title,\n                    orig_movie_name=orig_movie_name,\n                    year_movie=year_movie,\n                    list_genres_current_row=list_genres_current_row,\n                )\n            )\n\n        return list_movies\n</code></pre>"},{"location":"docstrings/#src.python.csv_utils.read_csv_ratings","title":"<code>read_csv_ratings(path_csv)</code>","text":"<p>Read the Ratings csv given by \"Over the movie\". Skip the line if errors.</p> <p>Parameters:</p> Name Type Description Default <code>path_csv</code> <code>Path</code> <p>the path of the .csv to read.</p> required <p>Returns:</p> Type Description <code>list[Rating]</code> <p>list[users]: a list an User object.</p> Source code in <code>src/python/csv_utils.py</code> <pre><code>def read_csv_ratings(path_csv: Path) -&gt; list[Rating]:\n    \"\"\"Read the Ratings csv given by \"Over the movie\". Skip the line if errors.\n\n    Args:\n        path_csv (Path): the path of the .csv to read.\n\n    Returns:\n        list[users]: a list an User object.\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    max_column_allowed, max_allowed_rating = 4, 5\n    list_rating: list[Rating] = []\n    with open(path_csv, encoding=\"UTF-8\") as file:\n        list_userid: set[int] = set()\n        list_movieid: set[int] = set()\n        csv_reader = csv.DictReader(file, delimiter=\",\")\n        for i, row in enumerate(csv_reader, start=1):\n            if len(row) &gt; max_column_allowed:\n                sys.exit(f\"Expected only {max_column_allowed} columns in ratings csv\")\n            user_id_raw, movie_id_raw, rating_raw, timestamp_raw = (\n                row[\"UserID\"],\n                row[\"MovieID\"],\n                row[\"Rating\"],\n                row[\"Timestamp\"],\n            )\n            try:\n                user_id = int(user_id_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The user id need to be an int. Now is %s Line %s\",\n                    user_id_raw,\n                    i,\n                )\n                continue\n            try:\n                movie_id = int(movie_id_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The movie id need to be an int. Now is %s Line %s\",\n                    movie_id_raw,\n                    i,\n                )\n                continue\n            try:\n                rating = int(rating_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The rating need to be an int. Now is %s Line %s\",\n                    rating_raw,\n                    i,\n                )\n                continue\n            try:\n                timestamp = int(timestamp_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The timestamp need to be an int. Now is %s Line %s\",\n                    timestamp_raw,\n                    i,\n                )\n                continue\n\n            if rating &gt; max_allowed_rating or rating &lt; 1:\n                logger.warning(\n                    \"SKIPPED: The rating in not within 1-%s. Now is %s Line %s\",\n                    max_allowed_rating,\n                    rating,\n                    i,\n                )\n                continue\n\n            list_movieid.add(movie_id)\n            list_userid.add(user_id)\n            list_rating.append(\n                Rating(\n                    user_id=user_id,\n                    movie_id=movie_id,\n                    rating=rating,\n                    timestamp=timestamp,\n                )\n            )\n    return list_rating\n</code></pre>"},{"location":"docstrings/#src.python.csv_utils.read_csv_users","title":"<code>read_csv_users(path_csv, path_json_cap)</code>","text":"<p>Read the Users csv given by \"Over the movie\". Skip the line if errors.</p> <p>Parameters:</p> Name Type Description Default <code>path_csv</code> <code>Path</code> <p>the path of the .csv to read.</p> required <code>path_json_cap</code> <code>Path</code> <p>the path of .json containing the informations about the CAP.</p> required <p>Returns:</p> Type Description <code>list[User]</code> <p>list[users]: a list an User object.</p> Source code in <code>src/python/csv_utils.py</code> <pre><code>def read_csv_users(path_csv: Path, path_json_cap: Path) -&gt; list[User]:\n    \"\"\"Read the Users csv given by \"Over the movie\". Skip the line if errors.\n\n    Args:\n        path_csv (Path): the path of the .csv to read.\n        path_json_cap (Path): the path of .json containing the informations about the CAP.\n\n    Returns:\n        list[users]: a list an User object.\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    max_column_allowed, max_user_age_allowed, min_user_age_allowed = 5, 6, 100\n    with open(path_json_cap, encoding=\"UTF-8\") as file:\n        list_all_cap = [comune[\"cap\"] for comune in json.load(file)]\n        set_all_cap = {item for sublist in list_all_cap for item in sublist}\n    list_users: list[User] = []\n    with open(path_csv, encoding=\"UTF-8\") as file:\n        csv_reader = csv.DictReader(file, delimiter=\",\")\n        list_userid: set[int] = set()\n        for i, row in enumerate(csv_reader, start=1):\n            if len(row) &gt; max_column_allowed:\n                sys.exit(f\"Expected only {max_column_allowed} columns\")\n            user_id, gender, age_raw, cap_raw, job = (\n                row[\"UserID\"],\n                row[\"Gender\"],\n                row[\"Age\"],\n                row[\"CAP\"],\n                row[\"Work\"],\n            )\n            try:\n                user_id = int(user_id)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The movie id need to be an int. Now is %s Line %s\",\n                    user_id,\n                    i,\n                )\n                continue\n            if user_id in list_userid:\n                sys.exit(f\"The user_id is not unique. Line {i}\")\n            list_userid.add(user_id)\n\n            if gender not in [\"M\", \"F\"]:\n                logger.warning(\"SKIPPED: %s Is not 'M' nor 'F'. Line %s\", row, i)\n                continue\n\n            try:\n                age = int(age_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The age need to be an int. Now is %s Line %s\",\n                    age_raw,\n                    i,\n                )\n                continue\n\n            if (\n                age_raw.isdigit()\n                and int(age_raw) &lt; min_user_age_allowed\n                or int(age_raw) &gt; max_user_age_allowed\n            ):\n                logger.warning(\"SKIPPED: %s The yob is not plausible. Line %s\", row, i)\n                continue\n\n            if cap_raw not in set_all_cap:\n                logger.warning(\"SKIPPED: %s The cap is unknown. Line %s\", cap_raw, i)\n                continue\n\n            try:\n                cap = int(cap_raw)\n            except ValueError:\n                logger.warning(\n                    \"SKIPPED: The CAP need to be an int. Now is %s Line %s\",\n                    age_raw,\n                    i,\n                )\n                continue\n\n            if job == \"Data Scientis\":\n                logger.info(\n                    \"CHANGED: %s Replaced 'Data scientis' with 'Data scientist'. Line %s\",\n                    row,\n                    i,\n                )\n\n            list_users.append(\n                User(\n                    user_id=user_id,\n                    gender=\"M\" if gender == \"M\" else \"F\",\n                    age=age,\n                    cap=cap,\n                    job=job,\n                )\n            )\n    return list_users\n</code></pre>"},{"location":"docstrings/#src.python.csv_utils.write_csv_movie","title":"<code>write_csv_movie(path_csv, list_movies)</code>","text":"<p>Write the clean csv movie file.</p> <p>Parameters:</p> Name Type Description Default <code>path_csv</code> <code>Path</code> <p>the path of the csv file to write.</p> required <code>list_movies</code> <code>list[Movie]</code> <p>the list of movies to write.</p> required Source code in <code>src/python/csv_utils.py</code> <pre><code>def write_csv_movie(path_csv: Path, list_movies: list[Movie]) -&gt; None:\n    \"\"\"Write the clean csv movie file.\n\n    Args:\n        path_csv (Path): the path of the csv file to write.\n        list_movies (list[Movie]): the list of movies to write.\n    \"\"\"\n    with open(\n        path_csv,\n        mode=\"w\",\n        encoding=\"UTF-8\",\n        newline=\"\",\n    ) as file:\n        writer = csv.writer(file)\n        writer.writerow([\"movie_id\", \"title\", \"original_title\", \"year_movie\", \"genre\"])\n        for movie in list_movies:\n            movie_id = movie.movie_id\n            title = movie.title\n            orig_movie_name = movie.orig_movie_name\n            year_movie = movie.year_movie\n            list_genres_current_row = movie.list_genres_current_row\n            writer.writerow(\n                [\n                    movie_id,\n                    title,\n                    orig_movie_name,\n                    year_movie,\n                    \"|\".join(list_genres_current_row),\n                ]\n            )\n</code></pre>"},{"location":"docstrings/#db-connection","title":"DB connection","text":"<p>Utils definitions for inserting the data into the mysql database.</p> <p></p> <p>Define classes with data structures based one the input csv file.</p>"},{"location":"docstrings/#src.python.db_connection.drop_all_tables","title":"<code>drop_all_tables(connection)</code>","text":"<p>Drop all the tables created previously.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required Source code in <code>src/python/db_connection.py</code> <pre><code>def drop_all_tables(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract,\n) -&gt; None:\n    \"\"\"Drop all the tables created previously.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n    \"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(\"DROP TABLE IF EXISTS movies_genres_link;\")\n        cursor.execute(\"DROP TABLE IF EXISTS genres;\")\n        cursor.execute(\"DROP TABLE IF EXISTS ratings;\")\n        cursor.execute(\"DROP TABLE IF EXISTS movies;\")\n        cursor.execute(\"DROP TABLE IF EXISTS jobs;\")\n        cursor.execute(\"DROP TABLE IF EXISTS users;\")\n        connection.commit()\n</code></pre>"},{"location":"docstrings/#src.python.db_connection.execute_sql_file","title":"<code>execute_sql_file(connection, path_sql)</code>","text":"<p>Read and execute the sql query within an input file.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required <code>path_sql</code> <code>Path</code> <p>the path of the file .sql to read and execute</p> required Source code in <code>src/python/db_connection.py</code> <pre><code>def execute_sql_file(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract, path_sql: Path\n) -&gt; None:\n    \"\"\"Read and execute the sql query within an input file.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n        path_sql (Path): the path of the file .sql to read and execute\n    \"\"\"\n    with open(path_sql, encoding=\"UTF-8\") as f:\n        sql_create_tables = f.read()\n    with connection.cursor() as cursor:\n        for sql_command in sql_create_tables.split(\";\"):\n            if sql_command.strip():\n                cursor.execute(sql_command.strip(), multi=True)\n        connection.commit()\n</code></pre>"},{"location":"docstrings/#src.python.db_connection.load_db","title":"<code>load_db(connection, list_movies, list_users, list_ratings)</code>","text":"<p>Load the data into the database.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required <code>list_movies</code> <code>list[Movie]</code> <p>a list an Movie object.</p> required <code>list_users</code> <code>list[User]</code> <p>a list an User object.</p> required <code>list_ratings</code> <code>list[Rating]</code> <p>a list an Rating object.</p> required Source code in <code>src/python/db_connection.py</code> <pre><code>def load_db(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract,\n    list_movies: list[Movie],\n    list_users: list[User],\n    list_ratings: list[Rating],\n) -&gt; None:\n    \"\"\"Load the data into the database.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n        list_movies (list[Movie]): a list an Movie object.\n        list_users (list[User]): a list an User object.\n        list_ratings (list[Rating]): a list an Rating object.\n    \"\"\"\n    with connection.cursor() as cursor:\n        for movie in list_movies:\n            cursor.execute(\n                \"INSERT INTO movies (movie_id, movie_title, movie_original_title, year_release) \\\n                VALUES (%s,%s,%s,%s)\",\n                (movie.movie_id, movie.title, movie.orig_movie_name, movie.year_movie),\n            )\n        connection.commit()\n\n    list_genres: list[str] = []\n    for movie in list_movies:\n        for genre in movie.list_genres_current_row:\n            if genre not in list_genres:\n                list_genres.append(genre)\n\n    with connection.cursor() as cursor:\n        for i, genre in enumerate(list_genres):\n            cursor.execute(\n                \"INSERT INTO genres (genre_id, genre) VALUES (%s, %s)\",\n                (i, genre),\n            )\n        connection.commit()\n\n    dict_movies_genres: dict[int, list[int]] = {}\n    for movie in list_movies:\n        for genre in movie.list_genres_current_row:\n            for i, genre_ref in enumerate(list_genres):\n                if genre == genre_ref:\n                    if movie.movie_id in dict_movies_genres:\n                        dict_movies_genres[movie.movie_id].append(i)\n                    else:\n                        dict_movies_genres[movie.movie_id] = [i]\n\n    with connection.cursor() as cursor:\n        for movie_id, list_genre_id in dict_movies_genres.items():\n            for genre_id in list_genre_id:\n                cursor.execute(\n                    \"INSERT INTO movies_genres_link (movie_id, genre_id) VALUES (%s, %s)\",\n                    (movie_id, genre_id),\n                )\n        connection.commit()\n\n    list_jobs: list[str] = []\n    for user in list_users:\n        if user.job not in list_jobs:\n            list_jobs.append(user.job)\n\n    with connection.cursor() as cursor:\n        for user in list_users:\n            cursor.execute(\n                \"INSERT INTO users (user_id, gender, age, cap, job_id) VALUES (%s,%s,%s,%s,%s)\",\n                (\n                    user.user_id,\n                    user.gender,\n                    user.age,\n                    user.cap,\n                    list_jobs.index(user.job),\n                ),\n            )\n        connection.commit()\n\n    with connection.cursor() as cursor:\n        for i, job in enumerate(list_jobs):\n            cursor.execute(\n                \"INSERT INTO jobs (job_id, job_type) VALUES (%s, %s)\",\n                (i, job),\n            )\n        connection.commit()\n\n    list_movies_id: set[int] = {movie.movie_id for movie in list_movies}\n    with connection.cursor() as cursor:\n        for rating in tqdm(list_ratings):\n            if rating.movie_id not in list_movies_id:\n                continue\n            cursor.execute(\n                \"INSERT INTO ratings (user_id,movie_id,rating,timestamp_unix) VALUES (%s,%s,%s,%s)\",\n                (rating.user_id, rating.movie_id, rating.rating, rating.timestamp),\n            )\n        connection.commit()\n</code></pre>"},{"location":"docstrings/#src.python.movie.Movie","title":"<code>Movie</code>  <code>dataclass</code>","text":"<p>Movie attributes found in the given movie csv.</p> Source code in <code>src/python/movie.py</code> <pre><code>@dataclass\nclass Movie:\n    \"\"\"Movie attributes found in the given movie csv.\"\"\"\n\n    movie_id: int\n    title: str\n    orig_movie_name: str | None\n    year_movie: int\n    list_genres_current_row: list[str]\n</code></pre>"},{"location":"docstrings/#src.python.movie.Rating","title":"<code>Rating</code>  <code>dataclass</code>","text":"<p>User attributes found in the given user csv.</p> Source code in <code>src/python/movie.py</code> <pre><code>@dataclass\nclass Rating:\n    \"\"\"User attributes found in the given user csv.\"\"\"\n\n    user_id: int\n    movie_id: int\n    rating: int\n    timestamp: int\n</code></pre>"},{"location":"docstrings/#src.python.movie.User","title":"<code>User</code>  <code>dataclass</code>","text":"<p>User attributes found in the given user csv.</p> Source code in <code>src/python/movie.py</code> <pre><code>@dataclass\nclass User:\n    \"\"\"User attributes found in the given user csv.\"\"\"\n\n    user_id: int\n    gender: Literal[\"M\", \"F\"]\n    age: int\n    cap: int\n    job: str\n</code></pre>"}]}